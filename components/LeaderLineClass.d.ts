import React from "react";
import { AnimationOptions, AnimationType, DashOptions, EnhancedDropShadowOptions, EnhancedLabelOptions, EnhancedLeaderLineOptions, OutlineOptions, PathConfiguration, PathType, PlugType, SocketGravity, SocketPosition } from "../types";
export declare class LeaderLineClass {
    private options;
    private component;
    private isVisible;
    constructor(start?: any, end?: any, options?: EnhancedLeaderLineOptions);
    setOptions(options: Partial<EnhancedLeaderLineOptions>): this;
    private _requestUpdate;
    render(): React.ReactElement;
    get startSocket(): SocketPosition;
    set startSocket(value: SocketPosition);
    get endSocket(): SocketPosition;
    set endSocket(value: SocketPosition);
    get startSocketGravity(): SocketGravity;
    set startSocketGravity(value: SocketGravity);
    get endSocketGravity(): SocketGravity;
    set endSocketGravity(value: SocketGravity);
    get path(): PathType | PathConfiguration;
    set path(value: PathType | PathConfiguration);
    get startPlug(): PlugType;
    set startPlug(value: PlugType);
    get endPlug(): PlugType;
    set endPlug(value: PlugType);
    get dropShadow(): boolean | EnhancedDropShadowOptions;
    set dropShadow(value: boolean | EnhancedDropShadowOptions);
    get dash(): DashOptions | undefined;
    set dash(value: DashOptions | undefined);
    get gradient(): any;
    set gradient(value: any);
    get outline(): boolean | OutlineOptions;
    set outline(value: boolean | OutlineOptions);
    get startLabel(): string | EnhancedLabelOptions | undefined;
    set startLabel(value: string | EnhancedLabelOptions | undefined);
    get middleLabel(): string | EnhancedLabelOptions | undefined;
    set middleLabel(value: string | EnhancedLabelOptions | undefined);
    get endLabel(): string | EnhancedLabelOptions | undefined;
    set endLabel(value: string | EnhancedLabelOptions | undefined);
    get captionLabel(): string | EnhancedLabelOptions | undefined;
    set captionLabel(value: string | EnhancedLabelOptions | undefined);
    get pathLabel(): string | EnhancedLabelOptions | undefined;
    set pathLabel(value: string | EnhancedLabelOptions | undefined);
    show(showEffectName?: AnimationType, animOptions?: AnimationOptions): this;
    hide(hideEffectName?: AnimationType, animOptions?: AnimationOptions): this;
    position(): this;
    remove(): void;
    getOptions(): EnhancedLeaderLineOptions;
    get visible(): boolean;
    get color(): string;
    set color(value: string);
    get size(): number;
    set size(value: number);
    private _animate;
    static pointAnchor: (element: React.RefObject<any>, options?: {
        x: number;
        y: number;
    }) => {
        element: React.RefObject<any>;
        x: number;
        y: number;
    };
    static areaAnchor: (element: React.RefObject<any>, options?: any) => {
        element: React.RefObject<any>;
        x: any;
        y: any;
        width: any;
        height: any;
    };
    static mouseHoverAnchor: (element: React.RefObject<any>, options?: any) => {
        element: React.RefObject<any>;
        showEffectName: any;
        hideEffectName: any;
        animOptions: any;
        style: any;
        hoverStyle: any;
    };
}
export declare const createLeaderLine: (start: any, end: any, options?: EnhancedLeaderLineOptions) => LeaderLineClass;
export declare const renderLeaderLine: (options: EnhancedLeaderLineOptions, instance?: LeaderLineClass) => React.ReactElement;
export default LeaderLineClass;
